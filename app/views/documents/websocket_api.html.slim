.jumbotron
  h2 WebSocket Data Interface (WebSocket API)
  small InterfaceURI: wss://eurocex.com:8080
  br
  small Format: JSON

.panel.panel-default
  .panel-heading
    h5 WebSocket API

  .panel-body
    p The WebSocket API provides a more real-time data access. Your  server can change the orderbook turnover and market data connections in real-time via websocket (push) to the user WebSocket API's.
    p The WebSocket API can be divided into three simple steps:
    ol
      li 1. Establishing of websocket connection
      li 2. API Token to authenticate
      li 3. Receiving and processing data

.panel.panel-default
  .panel-heading
    h5 Establishing of websocket connection

  .panel-body
    p WebSocket is a widely used as standard and supports a variety of languages. In Javascript for example:
    p Javascript:
    pre: code
      | var host = 'wss://eurocex.com:8080';
        var socket = new WebSocket(host);
        socket.onopen = function() {
          console.log("opened");
        }

        socket.onmessage = function(msg) {
          console.log(msg);
        }

        socket.onclose = function() {
          console.log("closed");
        }

.panel.panel-default
  .panel-heading
    h5 API Token to authenticate

  .panel-body
    p Prior to access, you must prepare your access/secret key. After registration by simply accessing the <a href='/api_tokens'>API Tokens page</a> you can get your key.
    p Once you establish a WebSocket connection with the server, the server returns a message in the following format:
    pre: code
      | {"challenge":"d45sSFIZZdYzRgwi-zDqA8HFP2MfVoWqXlHX-2LbB_37q9_3pkZ8og"}
    p The challenge contains a randomly generated string which the client needs to use access/secret key signature of this string, and then signing back to the server, which verifies the signature, then continue to the next step. Otherwise it returns an error message.
    p Signature generation is very simple, first put your access key and challenge string concatenation:
    pre: code
      | payload = access_key + challenge
    p Assuming access key for the "abc", challenge for the "def", the payload is "abcdef" followed by HMAC-SHA256 and secret key computing payload signature:
    pre: code
      | signature = HMAC-SHA256(secret_key, payload).to_hex
    p Assuming secret_key for 'ghi', using HMAC-SHA256 for the signature on the case of the payload results:
    pre: code
      | signature = HMAC-SHA256('ghi', 'abcdef').to_hex
                  = '52ca0e5beab532532c62155e78d81c7dc8ad6d6f744cf3797668cf52dd2f9a41'
    p Now we just need to get the signature back to the server in the following format:
    pre: code
      | {auth: {access_key: 'your_access_key', answer: 'the_signature'}}

.panel.panel-default
  .panel-heading
    h5 Receiving and processing data

  .panel-body
    p After validation by real-time data can be sent by the server to accept the current offer two types of real-time data via brave WebSocket API:. Trade and Orderbook detailed data format is as follows:
    table.table.result
      thead
        tr
          th Type
          th Example
          th Remarks
      tbody
        tr
          td Trade
          td: pre: code
            | { "trade"=>
                  { "id"=>2435,
                    "price"=>"3500.0",
                    "volume"=>"0.0331",
                    "funds"=>"115.85",
                    "market"=>"ltcbtc",
                    "created_at"=>"2014-06-16T05:02:37Z",
                    "side"=>"bid",
                    "bid"=>{
                      "id"=>3248, "side"=>"buy", "price"=>nil,
                      "avg_price"=>"3500.0", "state"=>"done", "market"=>"ltcbtc",
                      "created_at"=>"2014-06-16T05:02:37Z", "volume"=>"0.0331",
                      "remaining_volume"=>"0.0", "executed_volume"=>"0.0331"
                    }
                  }
              }
          td
            p Trade messages on behalf of your pending order a new deal.
            p price / volume: price / number of transactions
            p funds: Turnover (to quote currency)
            p market: market: the base currency / Quote currency
            p side: your role in this transaction in the (ask: seller, bid: buyer)
            p ask or bid: ask or bid: Transaction data after lodging
        tr
          td Orderbook
          td: pre: code
            | { "orderbook"=>
                { "action"=>"add",
                  "order"=>{
                    "id"=>3252,
                    "timestamp"=>1402898864,
                    "type"=>"ask",
                    "volume"=>"1.0",
                    "price"=>"3500.0",
                    "market"=>"ltcbtc",
                    "ord_type"=>"limit"}
                }
              }
          td style='width: 350px'
            p Orderbook message representative orderbook has changed.
            p Orderbook add a message ("action" => "add") to indicate a new order to join orderbook.
            p Orderbook remove the message ("action" => "remove") indicates orderbook removed this order (may be due to the user cancels the pending order or a pending order completely turnover).
            p Orderbook update messages ("action" => "update") indicates orderbook in order to be updated.
            p action: orderbook operating ranges: add, remove, update
            p order: the order being operated

